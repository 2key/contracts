{
  "contractName": "GetCode",
  "abi": [],
  "bytecode": "0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820db8c8caa22b6d30ce865524ff769249c70786dbf80e1da83009376dffd920a6d0029",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820db8c8caa22b6d30ce865524ff769249c70786dbf80e1da83009376dffd920a6d0029",
  "sourceMap": "424:697:0:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24",
  "deployedSourceMap": "424:697:0:-;;;;;;;;",
  "source": "pragma solidity ^0.4.24;\n\n/// The following example provides library code to access the code of another contract and load it into a bytes variable.\n/// This is not possible at all with “plain Solidity\" and the idea is that assembly libraries will be used to enhance the\n/// language in such ways.\n\n/// Took from Solidity official documentation\n/// https://solidity.readthedocs.io/en/latest/assembly.html?highlight=getCode\nlibrary GetCode {\n    function at(address _addr) internal returns (bytes o_code) {\n        assembly {\n        // retrieve the size of the code, this needs assembly\n            let size := extcodesize(_addr)\n        // allocate output byte array - this could also be done without assembly\n        // by using o_code = new bytes(size)\n            o_code := mload(0x40)\n        // new \"memory end\" including padding\n            mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n        // store length in memory\n            mstore(o_code, size)\n        // actually retrieve the code, this needs assembly\n            extcodecopy(_addr, add(o_code, 0x20), 0, size)\n        }\n    }\n}",
  "sourcePath": "/Users/nikolamadjarevic/Desktop/2key/contracts/contracts/2key/GetCode.sol",
  "ast": {
    "absolutePath": "/Users/nikolamadjarevic/Desktop/2key/contracts/contracts/2key/GetCode.sol",
    "exportedSymbols": {
      "GetCode": [
        11
      ]
    },
    "id": 12,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:0"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": "The following example provides library code to access the code of another contract and load it into a bytes variable.\n This is not possible at all with “plain Solidity\" and the idea is that assembly libraries will be used to enhance the\n language in such ways.\n Took from Solidity official documentation\n https://solidity.readthedocs.io/en/latest/assembly.html?highlight=getCode",
        "fullyImplemented": true,
        "id": 11,
        "linearizedBaseContracts": [
          11
        ],
        "name": "GetCode",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 9,
              "nodeType": "Block",
              "src": "505:614:0",
              "statements": [
                {
                  "externalReferences": [
                    {
                      "_addr": {
                        "declaration": 3,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1069:5:0",
                        "valueSize": 1
                      }
                    },
                    {
                      "o_code": {
                        "declaration": 6,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1080:6:0",
                        "valueSize": 1
                      }
                    },
                    {
                      "_addr": {
                        "declaration": 3,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "624:5:0",
                        "valueSize": 1
                      }
                    },
                    {
                      "o_code": {
                        "declaration": 6,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "769:6:0",
                        "valueSize": 1
                      }
                    },
                    {
                      "o_code": {
                        "declaration": 6,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "866:6:0",
                        "valueSize": 1
                      }
                    },
                    {
                      "o_code": {
                        "declaration": 6,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "972:6:0",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 8,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let size := extcodesize(_addr)\n    o_code := mload(0x40)\n    mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n    mstore(o_code, size)\n    extcodecopy(_addr, add(o_code, 0x20), 0, size)\n}",
                  "src": "515:604:0"
                }
              ]
            },
            "documentation": null,
            "id": 10,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "at",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3,
                  "name": "_addr",
                  "nodeType": "VariableDeclaration",
                  "scope": 10,
                  "src": "458:13:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "458:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "457:15:0"
            },
            "payable": false,
            "returnParameters": {
              "id": 7,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6,
                  "name": "o_code",
                  "nodeType": "VariableDeclaration",
                  "scope": 10,
                  "src": "491:12:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 5,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "491:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "490:14:0"
            },
            "scope": 11,
            "src": "446:673:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 12,
        "src": "424:697:0"
      }
    ],
    "src": "0:1121:0"
  },
  "legacyAST": {
    "absolutePath": "/Users/nikolamadjarevic/Desktop/2key/contracts/contracts/2key/GetCode.sol",
    "exportedSymbols": {
      "GetCode": [
        11
      ]
    },
    "id": 12,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:0"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": "The following example provides library code to access the code of another contract and load it into a bytes variable.\n This is not possible at all with “plain Solidity\" and the idea is that assembly libraries will be used to enhance the\n language in such ways.\n Took from Solidity official documentation\n https://solidity.readthedocs.io/en/latest/assembly.html?highlight=getCode",
        "fullyImplemented": true,
        "id": 11,
        "linearizedBaseContracts": [
          11
        ],
        "name": "GetCode",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 9,
              "nodeType": "Block",
              "src": "505:614:0",
              "statements": [
                {
                  "externalReferences": [
                    {
                      "_addr": {
                        "declaration": 3,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1069:5:0",
                        "valueSize": 1
                      }
                    },
                    {
                      "o_code": {
                        "declaration": 6,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1080:6:0",
                        "valueSize": 1
                      }
                    },
                    {
                      "_addr": {
                        "declaration": 3,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "624:5:0",
                        "valueSize": 1
                      }
                    },
                    {
                      "o_code": {
                        "declaration": 6,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "769:6:0",
                        "valueSize": 1
                      }
                    },
                    {
                      "o_code": {
                        "declaration": 6,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "866:6:0",
                        "valueSize": 1
                      }
                    },
                    {
                      "o_code": {
                        "declaration": 6,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "972:6:0",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 8,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let size := extcodesize(_addr)\n    o_code := mload(0x40)\n    mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n    mstore(o_code, size)\n    extcodecopy(_addr, add(o_code, 0x20), 0, size)\n}",
                  "src": "515:604:0"
                }
              ]
            },
            "documentation": null,
            "id": 10,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "at",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3,
                  "name": "_addr",
                  "nodeType": "VariableDeclaration",
                  "scope": 10,
                  "src": "458:13:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "458:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "457:15:0"
            },
            "payable": false,
            "returnParameters": {
              "id": 7,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6,
                  "name": "o_code",
                  "nodeType": "VariableDeclaration",
                  "scope": 10,
                  "src": "491:12:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 5,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "491:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "490:14:0"
            },
            "scope": 11,
            "src": "446:673:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 12,
        "src": "424:697:0"
      }
    ],
    "src": "0:1121:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "2.0.1",
  "updatedAt": "2018-08-30T08:37:47.031Z"
}