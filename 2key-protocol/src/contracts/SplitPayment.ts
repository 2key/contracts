/* GENERATED BY TYPECHAIN VER. 0.2.7 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class SplitPayment extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [],
        name: "totalShares",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "uint256" }],
        name: "payees",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "address" }],
        name: "released",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "address" }],
        name: "shares",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "totalReleased",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          { name: "_payees", type: "address[]" },
          { name: "_shares", type: "uint256[]" }
        ],
        payable: true,
        stateMutability: "payable",
        type: "constructor"
      },
      { payable: true, stateMutability: "payable", type: "fallback" },
      {
        constant: false,
        inputs: [],
        name: "claim",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<SplitPayment> {
    const contract = new SplitPayment(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get totalShares(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.totalShares, []);
  }

  public get totalReleased(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.totalReleased, []);
  }

  public payees(arg0: BigNumber | number): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.payees, [arg0.toString()]);
  }

  public released(arg0: BigNumber | string): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.released, [arg0.toString()]);
  }

  public shares(arg0: BigNumber | string): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.shares, [arg0.toString()]);
  }

  public claimTx(): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "claim", []);
  }
}
