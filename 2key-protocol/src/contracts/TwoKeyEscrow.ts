/* GENERATED BY TYPECHAIN VER. 0.2.6 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class TwoKeyEscrow extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: false,
        inputs: [
          { name: "_to", type: "address" },
          { name: "_tokenID", type: "uint256" },
          { name: "_childContract", type: "address" },
          { name: "_amount", type: "uint256" }
        ],
        name: "transferFungibleChild",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "kill",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_tokenID", type: "uint256" },
          { name: "_childContract", type: "address" },
          { name: "_index", type: "uint256" }
        ],
        name: "addNonFungibleChild",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "renounceOwnership",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_tokenID", type: "uint256" },
          { name: "_childContract", type: "address" },
          { name: "_amount", type: "uint256" }
        ],
        name: "addFungibleChild",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "owner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_to", type: "address" },
          { name: "_tokenID", type: "uint256" },
          { name: "_childContract", type: "address" },
          { name: "_childTokenID", type: "uint256" }
        ],
        name: "transferNonFungibleChild",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_to", type: "address" }],
        name: "expire",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_newOwner", type: "address" }],
        name: "transferOwnership",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "token",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          { name: "_eventSource", type: "address" },
          { name: "_from", type: "address" },
          { name: "_economy", type: "address" },
          { name: "_payout", type: "uint256" },
          { name: "_campaign", type: "address" },
          { name: "_buyer", type: "address" },
          { name: "_seller", type: "address" },
          { name: "_moderator", type: "address" },
          { name: "_escrowPrecentage", type: "uint256" },
          { name: "_start", type: "uint256" },
          { name: "_duration", type: "uint256" },
          { name: "_whitelistConverter", type: "address" },
          { name: "_rate", type: "uint256" },
          { name: "_maxPi", type: "uint256" }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "_contract", type: "address" }],
        name: "Expired",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "previousOwner", type: "address" }],
        name: "OwnershipRenounced",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "previousOwner", type: "address" },
          { indexed: true, name: "newOwner", type: "address" }
        ],
        name: "OwnershipTransferred",
        type: "event"
      },
      {
        constant: false,
        inputs: [
          { name: "_tokenID", type: "uint256" },
          { name: "_childContract", type: "address" },
          { name: "_childTokenID", type: "uint256" }
        ],
        name: "transferNonFungibleChildTwoKeyToken",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_tokenID", type: "uint256" },
          { name: "_childContract", type: "address" },
          { name: "_amount", type: "uint256" }
        ],
        name: "transferFungibleChildTwoKeyToken",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_tokenID", type: "uint256" },
          { name: "_childContract", type: "address" },
          { name: "_childTokenID", type: "uint256" }
        ],
        name: "cancelNonFungibleChildTwoKey",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_tokenID", type: "uint256" },
          { name: "_childContract", type: "address" },
          { name: "_amount", type: "uint256" }
        ],
        name: "cancelFungibleChildTwoKey",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<TwoKeyEscrow> {
    const contract = new TwoKeyEscrow(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get owner(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.owner, []);
  }

  public get token(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.token, []);
  }

  public transferFungibleChildTx(
    _to: BigNumber | string,
    _tokenID: BigNumber | number,
    _childContract: BigNumber | string,
    _amount: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "transferFungibleChild",
      [
        _to.toString(),
        _tokenID.toString(),
        _childContract.toString(),
        _amount.toString()
      ]
    );
  }
  public killTx(): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "kill", []);
  }
  public addNonFungibleChildTx(
    _tokenID: BigNumber | number,
    _childContract: BigNumber | string,
    _index: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "addNonFungibleChild",
      [_tokenID.toString(), _childContract.toString(), _index.toString()]
    );
  }
  public renounceOwnershipTx(): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "renounceOwnership",
      []
    );
  }
  public addFungibleChildTx(
    _tokenID: BigNumber | number,
    _childContract: BigNumber | string,
    _amount: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "addFungibleChild",
      [_tokenID.toString(), _childContract.toString(), _amount.toString()]
    );
  }
  public transferNonFungibleChildTx(
    _to: BigNumber | string,
    _tokenID: BigNumber | number,
    _childContract: BigNumber | string,
    _childTokenID: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "transferNonFungibleChild",
      [
        _to.toString(),
        _tokenID.toString(),
        _childContract.toString(),
        _childTokenID.toString()
      ]
    );
  }
  public expireTx(
    _to: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "expire", [
      _to.toString()
    ]);
  }
  public transferOwnershipTx(
    _newOwner: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "transferOwnership",
      [_newOwner.toString()]
    );
  }
  public transferNonFungibleChildTwoKeyTokenTx(
    _tokenID: BigNumber | number,
    _childContract: BigNumber | string,
    _childTokenID: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "transferNonFungibleChildTwoKeyToken",
      [_tokenID.toString(), _childContract.toString(), _childTokenID.toString()]
    );
  }
  public transferFungibleChildTwoKeyTokenTx(
    _tokenID: BigNumber | number,
    _childContract: BigNumber | string,
    _amount: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "transferFungibleChildTwoKeyToken",
      [_tokenID.toString(), _childContract.toString(), _amount.toString()]
    );
  }
  public cancelNonFungibleChildTwoKeyTx(
    _tokenID: BigNumber | number,
    _childContract: BigNumber | string,
    _childTokenID: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "cancelNonFungibleChildTwoKey",
      [_tokenID.toString(), _childContract.toString(), _childTokenID.toString()]
    );
  }
  public cancelFungibleChildTwoKeyTx(
    _tokenID: BigNumber | number,
    _childContract: BigNumber | string,
    _amount: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "cancelFungibleChildTwoKey",
      [_tokenID.toString(), _childContract.toString(), _amount.toString()]
    );
  }

  public ExpiredEvent(eventFilter: {
    _contract?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { _contract: BigNumber | string },
    { _contract?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { _contract: BigNumber | string },
      { _contract?: BigNumber | string | Array<BigNumber | string> }
    >(this, "Expired", eventFilter);
  }
  public OwnershipRenouncedEvent(eventFilter: {
    previousOwner?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { previousOwner: BigNumber | string },
    { previousOwner?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { previousOwner: BigNumber | string },
      { previousOwner?: BigNumber | string | Array<BigNumber | string> }
    >(this, "OwnershipRenounced", eventFilter);
  }
  public OwnershipTransferredEvent(eventFilter: {
    previousOwner?: BigNumber | string | Array<BigNumber | string>;
    newOwner?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { previousOwner: BigNumber | string; newOwner: BigNumber | string },
    {
      previousOwner?: BigNumber | string | Array<BigNumber | string>;
      newOwner?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { previousOwner: BigNumber | string; newOwner: BigNumber | string },
      {
        previousOwner?: BigNumber | string | Array<BigNumber | string>;
        newOwner?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "OwnershipTransferred", eventFilter);
  }
}
