/* GENERATED BY TYPECHAIN VER. 0.2.7 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class TwoKeyCampaignInventory extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        inputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "_contract", type: "address" }],
        name: "Expired",
        type: "event"
      },
      {
        constant: false,
        inputs: [
          { name: "_tokenID", type: "uint256" },
          { name: "_assetContract", type: "address" },
          { name: "_amount", type: "uint256" }
        ],
        name: "addFungibleAsset",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_tokenID", type: "uint256" },
          { name: "_assetContract", type: "address" },
          { name: "_index", type: "uint256" }
        ],
        name: "addNonFungibleAsset",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_to", type: "address" },
          { name: "_tokenID", type: "uint256" },
          { name: "_assetContract", type: "address" },
          { name: "_amount", type: "uint256" }
        ],
        name: "transferFungibleAsset",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_to", type: "address" },
          { name: "_tokenID", type: "uint256" },
          { name: "_assetContract", type: "address" },
          { name: "_assetTokenID", type: "uint256" }
        ],
        name: "transferNonFungibleAsset",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_to", type: "address" },
          { name: "_tokenID", type: "uint256" },
          { name: "_assetContract", type: "address" },
          { name: "_amount", type: "uint256" }
        ],
        name: "expireFungible",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_to", type: "address" },
          { name: "_tokenID", type: "uint256" },
          { name: "_assetContract", type: "address" },
          { name: "_assetTokenID", type: "uint256" }
        ],
        name: "expireNonFungible",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_tokenID", type: "uint256" },
          { name: "_assetContract", type: "address" },
          { name: "_amount", type: "uint256" }
        ],
        name: "removeFungibleAssets",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_tokenID", type: "uint256" },
          { name: "_assetContract", type: "address" },
          { name: "_amount", type: "uint256" }
        ],
        name: "addFungibleAssets",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_tokenID", type: "uint256" },
          { name: "_assetContract", type: "address" }
        ],
        name: "setFungibleAssetsToZero",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_tokenID", type: "uint256" },
          { name: "_assetContract", type: "address" }
        ],
        name: "setFungibleAssetsToOne",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<TwoKeyCampaignInventory> {
    const contract = new TwoKeyCampaignInventory(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public addFungibleAssetTx(
    _tokenID: BigNumber | number,
    _assetContract: BigNumber | string,
    _amount: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "addFungibleAsset",
      [_tokenID.toString(), _assetContract.toString(), _amount.toString()]
    );
  }
  public addNonFungibleAssetTx(
    _tokenID: BigNumber | number,
    _assetContract: BigNumber | string,
    _index: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "addNonFungibleAsset",
      [_tokenID.toString(), _assetContract.toString(), _index.toString()]
    );
  }
  public transferFungibleAssetTx(
    _to: BigNumber | string,
    _tokenID: BigNumber | number,
    _assetContract: BigNumber | string,
    _amount: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "transferFungibleAsset",
      [
        _to.toString(),
        _tokenID.toString(),
        _assetContract.toString(),
        _amount.toString()
      ]
    );
  }
  public transferNonFungibleAssetTx(
    _to: BigNumber | string,
    _tokenID: BigNumber | number,
    _assetContract: BigNumber | string,
    _assetTokenID: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "transferNonFungibleAsset",
      [
        _to.toString(),
        _tokenID.toString(),
        _assetContract.toString(),
        _assetTokenID.toString()
      ]
    );
  }
  public expireFungibleTx(
    _to: BigNumber | string,
    _tokenID: BigNumber | number,
    _assetContract: BigNumber | string,
    _amount: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "expireFungible",
      [
        _to.toString(),
        _tokenID.toString(),
        _assetContract.toString(),
        _amount.toString()
      ]
    );
  }
  public expireNonFungibleTx(
    _to: BigNumber | string,
    _tokenID: BigNumber | number,
    _assetContract: BigNumber | string,
    _assetTokenID: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "expireNonFungible",
      [
        _to.toString(),
        _tokenID.toString(),
        _assetContract.toString(),
        _assetTokenID.toString()
      ]
    );
  }
  public removeFungibleAssetsTx(
    _tokenID: BigNumber | number,
    _assetContract: BigNumber | string,
    _amount: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "removeFungibleAssets",
      [_tokenID.toString(), _assetContract.toString(), _amount.toString()]
    );
  }
  public addFungibleAssetsTx(
    _tokenID: BigNumber | number,
    _assetContract: BigNumber | string,
    _amount: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "addFungibleAssets",
      [_tokenID.toString(), _assetContract.toString(), _amount.toString()]
    );
  }
  public setFungibleAssetsToZeroTx(
    _tokenID: BigNumber | number,
    _assetContract: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setFungibleAssetsToZero",
      [_tokenID.toString(), _assetContract.toString()]
    );
  }
  public setFungibleAssetsToOneTx(
    _tokenID: BigNumber | number,
    _assetContract: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setFungibleAssetsToOne",
      [_tokenID.toString(), _assetContract.toString()]
    );
  }

  public ExpiredEvent(eventFilter: {
    _contract?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { _contract: BigNumber | string },
    { _contract?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { _contract: BigNumber | string },
      { _contract?: BigNumber | string | Array<BigNumber | string> }
    >(this, "Expired", eventFilter);
  }
}
