/* GENERATED BY TYPECHAIN VER. 0.2.6 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class BasicStorage extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        inputs: [],
        payable: true,
        stateMutability: "payable",
        type: "constructor"
      },
      { payable: true, stateMutability: "payable", type: "fallback" },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "a", type: "address" },
          { indexed: false, name: "_d", type: "uint256" }
        ],
        name: "Store",
        type: "event"
      },
      {
        constant: false,
        inputs: [{ name: "x", type: "uint256" }],
        name: "set",
        outputs: [],
        payable: true,
        stateMutability: "payable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "get",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<BasicStorage> {
    const contract = new BasicStorage(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get get(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.get, []);
  }

  public setTx(
    x: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.IPayableTxParams> {
    return new TC.DeferredTransactionWrapper<TC.IPayableTxParams>(this, "set", [
      x.toString()
    ]);
  }

  public StoreEvent(eventFilter: {}): TC.DeferredEventWrapper<
    { a: BigNumber | string; _d: BigNumber | number },
    {}
  > {
    return new TC.DeferredEventWrapper<
      { a: BigNumber | string; _d: BigNumber | number },
      {}
    >(this, "Store", eventFilter);
  }
}
