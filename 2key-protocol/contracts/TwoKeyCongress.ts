/* GENERATED BY TYPECHAIN VER. 0.2.6 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class TwoKeyCongress extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [{ name: "", type: "uint256" }],
        name: "proposals",
        outputs: [
          { name: "recipient", type: "address" },
          { name: "amount", type: "uint256" },
          { name: "description", type: "string" },
          { name: "minExecutionDate", type: "uint256" },
          { name: "executed", type: "bool" },
          { name: "proposalPassed", type: "bool" },
          { name: "numberOfVotes", type: "uint256" },
          { name: "currentResult", type: "int256" },
          { name: "proposalHash", type: "bytes32" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "address" }],
        name: "memberId",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "numProposals",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "uint256" }],
        name: "members",
        outputs: [
          { name: "member", type: "address" },
          { name: "name", type: "string" },
          { name: "memberSince", type: "uint256" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "debatingPeriodInMinutes",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "renounceOwnership",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "minimumQuorum",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "owner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_from", type: "address" },
          { name: "_value", type: "uint256" },
          { name: "_token", type: "address" },
          { name: "_extraData", type: "bytes" }
        ],
        name: "receiveApproval",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_newOwner", type: "address" }],
        name: "transferOwnership",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          { name: "_minimumQuorumForProposals", type: "uint256" },
          { name: "_minutesForDebate", type: "uint256" }
        ],
        payable: true,
        stateMutability: "payable",
        type: "constructor"
      },
      { payable: true, stateMutability: "payable", type: "fallback" },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "proposalID", type: "uint256" },
          { indexed: false, name: "recipient", type: "address" },
          { indexed: false, name: "amount", type: "uint256" },
          { indexed: false, name: "description", type: "string" }
        ],
        name: "ProposalAdded",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "proposalID", type: "uint256" },
          { indexed: false, name: "position", type: "bool" },
          { indexed: false, name: "voter", type: "address" },
          { indexed: false, name: "justification", type: "string" }
        ],
        name: "Voted",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "proposalID", type: "uint256" },
          { indexed: false, name: "result", type: "int256" },
          { indexed: false, name: "quorum", type: "uint256" },
          { indexed: false, name: "active", type: "bool" }
        ],
        name: "ProposalTallied",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "member", type: "address" },
          { indexed: false, name: "isMember", type: "bool" }
        ],
        name: "MembershipChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "_newMinimumQuorum", type: "uint256" },
          {
            indexed: false,
            name: "_newDebatingPeriodInMinutes",
            type: "uint256"
          }
        ],
        name: "ChangeOfRules",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "sender", type: "address" },
          { indexed: false, name: "amount", type: "uint256" }
        ],
        name: "ReceivedEther",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "_from", type: "address" },
          { indexed: false, name: "_value", type: "uint256" },
          { indexed: false, name: "_token", type: "address" },
          { indexed: false, name: "_extraData", type: "bytes" }
        ],
        name: "ReceivedTokens",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "previousOwner", type: "address" }],
        name: "OwnershipRenounced",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "previousOwner", type: "address" },
          { indexed: true, name: "newOwner", type: "address" }
        ],
        name: "OwnershipTransferred",
        type: "event"
      },
      {
        constant: false,
        inputs: [
          { name: "targetMember", type: "address" },
          { name: "memberName", type: "string" }
        ],
        name: "addMember",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "targetMember", type: "address" }],
        name: "removeMember",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "minimumQuorumForProposals", type: "uint256" },
          { name: "minutesForDebate", type: "uint256" }
        ],
        name: "changeVotingRules",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "beneficiary", type: "address" },
          { name: "weiAmount", type: "uint256" },
          { name: "jobDescription", type: "string" },
          { name: "transactionBytecode", type: "bytes" }
        ],
        name: "newProposal",
        outputs: [{ name: "proposalID", type: "uint256" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "beneficiary", type: "address" },
          { name: "etherAmount", type: "uint256" },
          { name: "jobDescription", type: "string" },
          { name: "transactionBytecode", type: "bytes" }
        ],
        name: "newProposalInEther",
        outputs: [{ name: "proposalID", type: "uint256" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "proposalNumber", type: "uint256" },
          { name: "beneficiary", type: "address" },
          { name: "weiAmount", type: "uint256" },
          { name: "transactionBytecode", type: "bytes" }
        ],
        name: "checkProposalCode",
        outputs: [{ name: "codeChecksOut", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "proposalNumber", type: "uint256" },
          { name: "supportsProposal", type: "bool" },
          { name: "justificationText", type: "string" }
        ],
        name: "vote",
        outputs: [{ name: "voteID", type: "uint256" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "proposalNumber", type: "uint256" }],
        name: "getVoteCount",
        outputs: [
          { name: "numberOfVotes", type: "uint256" },
          { name: "currentResult", type: "int256" },
          { name: "description", type: "string" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "proposalNumber", type: "uint256" },
          { name: "transactionBytecode", type: "bytes" }
        ],
        name: "executeProposal",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<TwoKeyCongress> {
    const contract = new TwoKeyCongress(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get numProposals(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.numProposals, []);
  }

  public get debatingPeriodInMinutes(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.debatingPeriodInMinutes, []);
  }

  public get minimumQuorum(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.minimumQuorum, []);
  }

  public get owner(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.owner, []);
  }

  public proposals(
    arg0: BigNumber | number
  ): Promise<
    [
      string,
      BigNumber,
      string,
      BigNumber,
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      string
    ]
  > {
    return TC.promisify(this.rawWeb3Contract.proposals, [arg0.toString()]);
  }

  public memberId(arg0: BigNumber | string): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.memberId, [arg0.toString()]);
  }

  public members(
    arg0: BigNumber | number
  ): Promise<[string, string, BigNumber]> {
    return TC.promisify(this.rawWeb3Contract.members, [arg0.toString()]);
  }

  public checkProposalCode(
    proposalNumber: BigNumber | number,
    beneficiary: BigNumber | string,
    weiAmount: BigNumber | number,
    transactionBytecode: string[]
  ): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.checkProposalCode, [
      proposalNumber.toString(),
      beneficiary.toString(),
      weiAmount.toString(),
      transactionBytecode.map(val => val.toString())
    ]);
  }

  public getVoteCount(
    proposalNumber: BigNumber | number
  ): Promise<[BigNumber, BigNumber, string]> {
    return TC.promisify(this.rawWeb3Contract.getVoteCount, [
      proposalNumber.toString()
    ]);
  }

  public renounceOwnershipTx(): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "renounceOwnership",
      []
    );
  }
  public receiveApprovalTx(
    _from: BigNumber | string,
    _value: BigNumber | number,
    _token: BigNumber | string,
    _extraData: string[]
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "receiveApproval",
      [
        _from.toString(),
        _value.toString(),
        _token.toString(),
        _extraData.map(val => val.toString())
      ]
    );
  }
  public transferOwnershipTx(
    _newOwner: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "transferOwnership",
      [_newOwner.toString()]
    );
  }
  public addMemberTx(
    targetMember: BigNumber | string,
    memberName: string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "addMember", [
      targetMember.toString(),
      memberName.toString()
    ]);
  }
  public removeMemberTx(
    targetMember: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "removeMember",
      [targetMember.toString()]
    );
  }
  public changeVotingRulesTx(
    minimumQuorumForProposals: BigNumber | number,
    minutesForDebate: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "changeVotingRules",
      [minimumQuorumForProposals.toString(), minutesForDebate.toString()]
    );
  }
  public newProposalTx(
    beneficiary: BigNumber | string,
    weiAmount: BigNumber | number,
    jobDescription: string,
    transactionBytecode: string[]
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "newProposal",
      [
        beneficiary.toString(),
        weiAmount.toString(),
        jobDescription.toString(),
        transactionBytecode.map(val => val.toString())
      ]
    );
  }
  public newProposalInEtherTx(
    beneficiary: BigNumber | string,
    etherAmount: BigNumber | number,
    jobDescription: string,
    transactionBytecode: string[]
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "newProposalInEther",
      [
        beneficiary.toString(),
        etherAmount.toString(),
        jobDescription.toString(),
        transactionBytecode.map(val => val.toString())
      ]
    );
  }
  public voteTx(
    proposalNumber: BigNumber | number,
    supportsProposal: boolean,
    justificationText: string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "vote", [
      proposalNumber.toString(),
      supportsProposal.toString(),
      justificationText.toString()
    ]);
  }
  public executeProposalTx(
    proposalNumber: BigNumber | number,
    transactionBytecode: string[]
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "executeProposal",
      [
        proposalNumber.toString(),
        transactionBytecode.map(val => val.toString())
      ]
    );
  }

  public ProposalAddedEvent(eventFilter: {}): TC.DeferredEventWrapper<
    {
      proposalID: BigNumber | number;
      recipient: BigNumber | string;
      amount: BigNumber | number;
      description: string;
    },
    {}
  > {
    return new TC.DeferredEventWrapper<
      {
        proposalID: BigNumber | number;
        recipient: BigNumber | string;
        amount: BigNumber | number;
        description: string;
      },
      {}
    >(this, "ProposalAdded", eventFilter);
  }
  public VotedEvent(eventFilter: {}): TC.DeferredEventWrapper<
    {
      proposalID: BigNumber | number;
      position: boolean;
      voter: BigNumber | string;
      justification: string;
    },
    {}
  > {
    return new TC.DeferredEventWrapper<
      {
        proposalID: BigNumber | number;
        position: boolean;
        voter: BigNumber | string;
        justification: string;
      },
      {}
    >(this, "Voted", eventFilter);
  }
  public ProposalTalliedEvent(eventFilter: {}): TC.DeferredEventWrapper<
    {
      proposalID: BigNumber | number;
      result: BigNumber | number;
      quorum: BigNumber | number;
      active: boolean;
    },
    {}
  > {
    return new TC.DeferredEventWrapper<
      {
        proposalID: BigNumber | number;
        result: BigNumber | number;
        quorum: BigNumber | number;
        active: boolean;
      },
      {}
    >(this, "ProposalTallied", eventFilter);
  }
  public MembershipChangedEvent(eventFilter: {}): TC.DeferredEventWrapper<
    { member: BigNumber | string; isMember: boolean },
    {}
  > {
    return new TC.DeferredEventWrapper<
      { member: BigNumber | string; isMember: boolean },
      {}
    >(this, "MembershipChanged", eventFilter);
  }
  public ChangeOfRulesEvent(eventFilter: {}): TC.DeferredEventWrapper<
    {
      _newMinimumQuorum: BigNumber | number;
      _newDebatingPeriodInMinutes: BigNumber | number;
    },
    {}
  > {
    return new TC.DeferredEventWrapper<
      {
        _newMinimumQuorum: BigNumber | number;
        _newDebatingPeriodInMinutes: BigNumber | number;
      },
      {}
    >(this, "ChangeOfRules", eventFilter);
  }
  public ReceivedEtherEvent(eventFilter: {}): TC.DeferredEventWrapper<
    { sender: BigNumber | string; amount: BigNumber | number },
    {}
  > {
    return new TC.DeferredEventWrapper<
      { sender: BigNumber | string; amount: BigNumber | number },
      {}
    >(this, "ReceivedEther", eventFilter);
  }
  public ReceivedTokensEvent(eventFilter: {}): TC.DeferredEventWrapper<
    {
      _from: BigNumber | string;
      _value: BigNumber | number;
      _token: BigNumber | string;
      _extraData: string[];
    },
    {}
  > {
    return new TC.DeferredEventWrapper<
      {
        _from: BigNumber | string;
        _value: BigNumber | number;
        _token: BigNumber | string;
        _extraData: string[];
      },
      {}
    >(this, "ReceivedTokens", eventFilter);
  }
  public OwnershipRenouncedEvent(eventFilter: {
    previousOwner?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { previousOwner: BigNumber | string },
    { previousOwner?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { previousOwner: BigNumber | string },
      { previousOwner?: BigNumber | string | Array<BigNumber | string> }
    >(this, "OwnershipRenounced", eventFilter);
  }
  public OwnershipTransferredEvent(eventFilter: {
    previousOwner?: BigNumber | string | Array<BigNumber | string>;
    newOwner?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { previousOwner: BigNumber | string; newOwner: BigNumber | string },
    {
      previousOwner?: BigNumber | string | Array<BigNumber | string>;
      newOwner?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { previousOwner: BigNumber | string; newOwner: BigNumber | string },
      {
        previousOwner?: BigNumber | string | Array<BigNumber | string>;
        newOwner?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "OwnershipTransferred", eventFilter);
  }
}
