/* GENERATED BY TYPECHAIN VER. 0.2.6 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class RefundEscrow extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [],
        name: "beneficiary",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_payee", type: "address" }],
        name: "withdraw",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "renounceOwnership",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "owner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "state",
        outputs: [{ name: "", type: "uint8" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_payee", type: "address" }],
        name: "depositsOf",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_newOwner", type: "address" }],
        name: "transferOwnership",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [{ name: "_beneficiary", type: "address" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      { anonymous: false, inputs: [], name: "Closed", type: "event" },
      { anonymous: false, inputs: [], name: "RefundsEnabled", type: "event" },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "payee", type: "address" },
          { indexed: false, name: "weiAmount", type: "uint256" }
        ],
        name: "Deposited",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "payee", type: "address" },
          { indexed: false, name: "weiAmount", type: "uint256" }
        ],
        name: "Withdrawn",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "previousOwner", type: "address" }],
        name: "OwnershipRenounced",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "previousOwner", type: "address" },
          { indexed: true, name: "newOwner", type: "address" }
        ],
        name: "OwnershipTransferred",
        type: "event"
      },
      {
        constant: false,
        inputs: [{ name: "_refundee", type: "address" }],
        name: "deposit",
        outputs: [],
        payable: true,
        stateMutability: "payable",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "close",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "enableRefunds",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "beneficiaryWithdraw",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_payee", type: "address" }],
        name: "withdrawalAllowed",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<RefundEscrow> {
    const contract = new RefundEscrow(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get beneficiary(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.beneficiary, []);
  }

  public get owner(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.owner, []);
  }

  public get state(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.state, []);
  }

  public depositsOf(_payee: BigNumber | string): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.depositsOf, [_payee.toString()]);
  }

  public withdrawalAllowed(_payee: BigNumber | string): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.withdrawalAllowed, [
      _payee.toString()
    ]);
  }

  public withdrawTx(
    _payee: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "withdraw", [
      _payee.toString()
    ]);
  }
  public renounceOwnershipTx(): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "renounceOwnership",
      []
    );
  }
  public transferOwnershipTx(
    _newOwner: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "transferOwnership",
      [_newOwner.toString()]
    );
  }
  public depositTx(
    _refundee: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.IPayableTxParams> {
    return new TC.DeferredTransactionWrapper<TC.IPayableTxParams>(
      this,
      "deposit",
      [_refundee.toString()]
    );
  }
  public closeTx(): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "close", []);
  }
  public enableRefundsTx(): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "enableRefunds",
      []
    );
  }
  public beneficiaryWithdrawTx(): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "beneficiaryWithdraw",
      []
    );
  }

  public ClosedEvent(eventFilter: {}): TC.DeferredEventWrapper<{}, {}> {
    return new TC.DeferredEventWrapper<{}, {}>(this, "Closed", eventFilter);
  }
  public RefundsEnabledEvent(eventFilter: {}): TC.DeferredEventWrapper<{}, {}> {
    return new TC.DeferredEventWrapper<{}, {}>(
      this,
      "RefundsEnabled",
      eventFilter
    );
  }
  public DepositedEvent(eventFilter: {
    payee?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { payee: BigNumber | string; weiAmount: BigNumber | number },
    { payee?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { payee: BigNumber | string; weiAmount: BigNumber | number },
      { payee?: BigNumber | string | Array<BigNumber | string> }
    >(this, "Deposited", eventFilter);
  }
  public WithdrawnEvent(eventFilter: {
    payee?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { payee: BigNumber | string; weiAmount: BigNumber | number },
    { payee?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { payee: BigNumber | string; weiAmount: BigNumber | number },
      { payee?: BigNumber | string | Array<BigNumber | string> }
    >(this, "Withdrawn", eventFilter);
  }
  public OwnershipRenouncedEvent(eventFilter: {
    previousOwner?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { previousOwner: BigNumber | string },
    { previousOwner?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { previousOwner: BigNumber | string },
      { previousOwner?: BigNumber | string | Array<BigNumber | string> }
    >(this, "OwnershipRenounced", eventFilter);
  }
  public OwnershipTransferredEvent(eventFilter: {
    previousOwner?: BigNumber | string | Array<BigNumber | string>;
    newOwner?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { previousOwner: BigNumber | string; newOwner: BigNumber | string },
    {
      previousOwner?: BigNumber | string | Array<BigNumber | string>;
      newOwner?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { previousOwner: BigNumber | string; newOwner: BigNumber | string },
      {
        previousOwner?: BigNumber | string | Array<BigNumber | string>;
        newOwner?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "OwnershipTransferred", eventFilter);
  }
}
