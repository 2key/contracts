/* GENERATED BY TYPECHAIN VER. 0.2.6 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class TwoKeyPlasmaEvents extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [
          { name: "", type: "address" },
          { name: "", type: "address" },
          { name: "", type: "address" }
        ],
        name: "visits",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "", type: "address" },
          { name: "", type: "address" },
          { name: "", type: "uint256" }
        ],
        name: "visits_list",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "renounceOwnership",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "owner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "address" }],
        name: "verifiedUsers",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_newOwner", type: "address" }],
        name: "transferOwnership",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "to", type: "address" },
          { indexed: true, name: "c", type: "address" },
          { indexed: false, name: "from", type: "address" }
        ],
        name: "Visited",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "_campaign", type: "address" },
          { indexed: true, name: "_from", type: "address" },
          { indexed: true, name: "_to", type: "address" }
        ],
        name: "Joined",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "previousOwner", type: "address" }],
        name: "OwnershipRenounced",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "previousOwner", type: "address" },
          { indexed: true, name: "newOwner", type: "address" }
        ],
        name: "OwnershipTransferred",
        type: "event"
      },
      {
        constant: false,
        inputs: [{ name: "owner", type: "address" }],
        name: "verifiedUser",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "from", type: "address" },
          { name: "c", type: "address" }
        ],
        name: "visited",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_campaign", type: "address" },
          { name: "_from", type: "address" },
          { name: "_to", type: "address" }
        ],
        name: "joined",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "from", type: "address" },
          { name: "c", type: "address" }
        ],
        name: "get_visits_list",
        outputs: [{ name: "", type: "address[]" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<TwoKeyPlasmaEvents> {
    const contract = new TwoKeyPlasmaEvents(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get owner(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.owner, []);
  }

  public visits(
    arg0: BigNumber | string,
    arg1: BigNumber | string,
    arg2: BigNumber | string
  ): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.visits, [
      arg0.toString(),
      arg1.toString(),
      arg2.toString()
    ]);
  }

  public visits_list(
    arg0: BigNumber | string,
    arg1: BigNumber | string,
    arg2: BigNumber | number
  ): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.visits_list, [
      arg0.toString(),
      arg1.toString(),
      arg2.toString()
    ]);
  }

  public verifiedUsers(arg0: BigNumber | string): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.verifiedUsers, [arg0.toString()]);
  }

  public get_visits_list(
    from: BigNumber | string,
    c: BigNumber | string
  ): Promise<string[]> {
    return TC.promisify(this.rawWeb3Contract.get_visits_list, [
      from.toString(),
      c.toString()
    ]);
  }

  public renounceOwnershipTx(): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "renounceOwnership",
      []
    );
  }
  public transferOwnershipTx(
    _newOwner: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "transferOwnership",
      [_newOwner.toString()]
    );
  }
  public verifiedUserTx(
    owner: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "verifiedUser",
      [owner.toString()]
    );
  }
  public visitedTx(
    from: BigNumber | string,
    c: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "visited", [
      from.toString(),
      c.toString()
    ]);
  }
  public joinedTx(
    _campaign: BigNumber | string,
    _from: BigNumber | string,
    _to: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "joined", [
      _campaign.toString(),
      _from.toString(),
      _to.toString()
    ]);
  }

  public VisitedEvent(eventFilter: {
    to?: BigNumber | string | Array<BigNumber | string>;
    c?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { to: BigNumber | string; c: BigNumber | string; from: BigNumber | string },
    {
      to?: BigNumber | string | Array<BigNumber | string>;
      c?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        to: BigNumber | string;
        c: BigNumber | string;
        from: BigNumber | string;
      },
      {
        to?: BigNumber | string | Array<BigNumber | string>;
        c?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "Visited", eventFilter);
  }
  public JoinedEvent(eventFilter: {
    _campaign?: BigNumber | string | Array<BigNumber | string>;
    _from?: BigNumber | string | Array<BigNumber | string>;
    _to?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    {
      _campaign: BigNumber | string;
      _from: BigNumber | string;
      _to: BigNumber | string;
    },
    {
      _campaign?: BigNumber | string | Array<BigNumber | string>;
      _from?: BigNumber | string | Array<BigNumber | string>;
      _to?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        _campaign: BigNumber | string;
        _from: BigNumber | string;
        _to: BigNumber | string;
      },
      {
        _campaign?: BigNumber | string | Array<BigNumber | string>;
        _from?: BigNumber | string | Array<BigNumber | string>;
        _to?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "Joined", eventFilter);
  }
  public OwnershipRenouncedEvent(eventFilter: {
    previousOwner?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { previousOwner: BigNumber | string },
    { previousOwner?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { previousOwner: BigNumber | string },
      { previousOwner?: BigNumber | string | Array<BigNumber | string> }
    >(this, "OwnershipRenounced", eventFilter);
  }
  public OwnershipTransferredEvent(eventFilter: {
    previousOwner?: BigNumber | string | Array<BigNumber | string>;
    newOwner?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { previousOwner: BigNumber | string; newOwner: BigNumber | string },
    {
      previousOwner?: BigNumber | string | Array<BigNumber | string>;
      newOwner?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { previousOwner: BigNumber | string; newOwner: BigNumber | string },
      {
        previousOwner?: BigNumber | string | Array<BigNumber | string>;
        newOwner?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "OwnershipTransferred", eventFilter);
  }
}
