/* GENERATED BY TYPECHAIN VER. 0.2.6 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class TokenRecipient extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      { payable: true, stateMutability: "payable", type: "fallback" },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "sender", type: "address" },
          { indexed: false, name: "amount", type: "uint256" }
        ],
        name: "ReceivedEther",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "_from", type: "address" },
          { indexed: false, name: "_value", type: "uint256" },
          { indexed: false, name: "_token", type: "address" },
          { indexed: false, name: "_extraData", type: "bytes" }
        ],
        name: "ReceivedTokens",
        type: "event"
      },
      {
        constant: false,
        inputs: [
          { name: "_from", type: "address" },
          { name: "_value", type: "uint256" },
          { name: "_token", type: "address" },
          { name: "_extraData", type: "bytes" }
        ],
        name: "receiveApproval",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<TokenRecipient> {
    const contract = new TokenRecipient(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public receiveApprovalTx(
    _from: BigNumber | string,
    _value: BigNumber | number,
    _token: BigNumber | string,
    _extraData: string[]
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "receiveApproval",
      [
        _from.toString(),
        _value.toString(),
        _token.toString(),
        _extraData.map(val => val.toString())
      ]
    );
  }

  public ReceivedEtherEvent(eventFilter: {}): TC.DeferredEventWrapper<
    { sender: BigNumber | string; amount: BigNumber | number },
    {}
  > {
    return new TC.DeferredEventWrapper<
      { sender: BigNumber | string; amount: BigNumber | number },
      {}
    >(this, "ReceivedEther", eventFilter);
  }
  public ReceivedTokensEvent(eventFilter: {}): TC.DeferredEventWrapper<
    {
      _from: BigNumber | string;
      _value: BigNumber | number;
      _token: BigNumber | string;
      _extraData: string[];
    },
    {}
  > {
    return new TC.DeferredEventWrapper<
      {
        _from: BigNumber | string;
        _value: BigNumber | number;
        _token: BigNumber | string;
        _extraData: string[];
      },
      {}
    >(this, "ReceivedTokens", eventFilter);
  }
}
