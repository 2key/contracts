/* GENERATED BY TYPECHAIN VER. 0.2.7 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class TwoKeyEventSource extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        inputs: [{ name: "_twoKeyAdminAddress", type: "address" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "_campaign", type: "address" },
          { indexed: true, name: "_owner", type: "address" }
        ],
        name: "Created",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "_campaign", type: "address" },
          { indexed: true, name: "_from", type: "address" },
          { indexed: true, name: "_to", type: "address" }
        ],
        name: "Joined",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "_campaign", type: "address" },
          { indexed: true, name: "_converter", type: "address" },
          { indexed: false, name: "_tokenID", type: "uint256" },
          { indexed: false, name: "_childContractID", type: "address" },
          { indexed: false, name: "_indexOrAmount", type: "uint256" },
          { indexed: false, name: "_type", type: "uint8" }
        ],
        name: "Escrow",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "_campaign", type: "address" },
          { indexed: true, name: "_to", type: "address" },
          { indexed: false, name: "_amount", type: "uint256" }
        ],
        name: "Rewarded",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "_campaign", type: "address" },
          { indexed: true, name: "_converter", type: "address" },
          { indexed: true, name: "_tokenID", type: "uint256" },
          { indexed: false, name: "_childContractID", type: "address" },
          { indexed: false, name: "_indexOrAmount", type: "uint256" },
          { indexed: false, name: "_type", type: "uint8" }
        ],
        name: "Fulfilled",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "_campaign", type: "address" },
          { indexed: true, name: "_converter", type: "address" },
          { indexed: true, name: "_tokenID", type: "uint256" },
          { indexed: false, name: "_childContractID", type: "address" },
          { indexed: false, name: "_indexOrAmount", type: "uint256" },
          { indexed: false, name: "_type", type: "uint8" }
        ],
        name: "Cancelled",
        type: "event"
      },
      {
        constant: false,
        inputs: [{ name: "_contractAddress", type: "address" }],
        name: "addContract",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_contractAddress", type: "address" }],
        name: "removeContract",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_newAddress", type: "address" }],
        name: "addAuthorizedAddress",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_authorizedAddress", type: "address" }],
        name: "removeAuthorizedAddress",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_contractCode", type: "bytes" },
          { name: "_campaignType", type: "uint8" }
        ],
        name: "addCampaignType",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_newAdminAddress", type: "address" }],
        name: "changeAdmin",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_contractCode", type: "bytes" }],
        name: "checkCanEmit",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_campaign", type: "address" },
          { name: "_owner", type: "address" }
        ],
        name: "created",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_campaign", type: "address" },
          { name: "_from", type: "address" },
          { name: "_to", type: "address" }
        ],
        name: "joined",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_campaign", type: "address" },
          { name: "_converter", type: "address" },
          { name: "_tokenID", type: "uint256" },
          { name: "_childContractID", type: "address" },
          { name: "_indexOrAmount", type: "uint256" },
          { name: "_type", type: "uint8" }
        ],
        name: "escrow",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_campaign", type: "address" },
          { name: "_to", type: "address" },
          { name: "_amount", type: "uint256" }
        ],
        name: "rewarded",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_campaign", type: "address" },
          { name: "_converter", type: "address" },
          { name: "_tokenID", type: "uint256" },
          { name: "_childContractID", type: "address" },
          { name: "_indexOrAmount", type: "uint256" },
          { name: "_type", type: "uint8" }
        ],
        name: "fulfilled",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_campaign", type: "address" },
          { name: "_converter", type: "address" },
          { name: "_tokenID", type: "uint256" },
          { name: "_childContractID", type: "address" },
          { name: "_indexOrAmount", type: "uint256" },
          { name: "_type", type: "uint8" }
        ],
        name: "cancelled",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getAdmin",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "_subAdmin", type: "address" }],
        name: "checkIsAuthorized",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<TwoKeyEventSource> {
    const contract = new TwoKeyEventSource(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get getAdmin(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.getAdmin, []);
  }

  public checkCanEmit(_contractCode: string[]): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.checkCanEmit, [
      _contractCode.map(val => val.toString())
    ]);
  }

  public checkIsAuthorized(_subAdmin: BigNumber | string): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.checkIsAuthorized, [
      _subAdmin.toString()
    ]);
  }

  public addContractTx(
    _contractAddress: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "addContract",
      [_contractAddress.toString()]
    );
  }
  public removeContractTx(
    _contractAddress: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "removeContract",
      [_contractAddress.toString()]
    );
  }
  public addAuthorizedAddressTx(
    _newAddress: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "addAuthorizedAddress",
      [_newAddress.toString()]
    );
  }
  public removeAuthorizedAddressTx(
    _authorizedAddress: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "removeAuthorizedAddress",
      [_authorizedAddress.toString()]
    );
  }
  public addCampaignTypeTx(
    _contractCode: string[],
    _campaignType: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "addCampaignType",
      [_contractCode.map(val => val.toString()), _campaignType.toString()]
    );
  }
  public changeAdminTx(
    _newAdminAddress: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "changeAdmin",
      [_newAdminAddress.toString()]
    );
  }
  public createdTx(
    _campaign: BigNumber | string,
    _owner: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "created", [
      _campaign.toString(),
      _owner.toString()
    ]);
  }
  public joinedTx(
    _campaign: BigNumber | string,
    _from: BigNumber | string,
    _to: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "joined", [
      _campaign.toString(),
      _from.toString(),
      _to.toString()
    ]);
  }
  public escrowTx(
    _campaign: BigNumber | string,
    _converter: BigNumber | string,
    _tokenID: BigNumber | number,
    _childContractID: BigNumber | string,
    _indexOrAmount: BigNumber | number,
    _type: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "escrow", [
      _campaign.toString(),
      _converter.toString(),
      _tokenID.toString(),
      _childContractID.toString(),
      _indexOrAmount.toString(),
      _type.toString()
    ]);
  }
  public rewardedTx(
    _campaign: BigNumber | string,
    _to: BigNumber | string,
    _amount: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "rewarded", [
      _campaign.toString(),
      _to.toString(),
      _amount.toString()
    ]);
  }
  public fulfilledTx(
    _campaign: BigNumber | string,
    _converter: BigNumber | string,
    _tokenID: BigNumber | number,
    _childContractID: BigNumber | string,
    _indexOrAmount: BigNumber | number,
    _type: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "fulfilled", [
      _campaign.toString(),
      _converter.toString(),
      _tokenID.toString(),
      _childContractID.toString(),
      _indexOrAmount.toString(),
      _type.toString()
    ]);
  }
  public cancelledTx(
    _campaign: BigNumber | string,
    _converter: BigNumber | string,
    _tokenID: BigNumber | number,
    _childContractID: BigNumber | string,
    _indexOrAmount: BigNumber | number,
    _type: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "cancelled", [
      _campaign.toString(),
      _converter.toString(),
      _tokenID.toString(),
      _childContractID.toString(),
      _indexOrAmount.toString(),
      _type.toString()
    ]);
  }

  public CreatedEvent(eventFilter: {
    _campaign?: BigNumber | string | Array<BigNumber | string>;
    _owner?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { _campaign: BigNumber | string; _owner: BigNumber | string },
    {
      _campaign?: BigNumber | string | Array<BigNumber | string>;
      _owner?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { _campaign: BigNumber | string; _owner: BigNumber | string },
      {
        _campaign?: BigNumber | string | Array<BigNumber | string>;
        _owner?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "Created", eventFilter);
  }
  public JoinedEvent(eventFilter: {
    _campaign?: BigNumber | string | Array<BigNumber | string>;
    _from?: BigNumber | string | Array<BigNumber | string>;
    _to?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    {
      _campaign: BigNumber | string;
      _from: BigNumber | string;
      _to: BigNumber | string;
    },
    {
      _campaign?: BigNumber | string | Array<BigNumber | string>;
      _from?: BigNumber | string | Array<BigNumber | string>;
      _to?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        _campaign: BigNumber | string;
        _from: BigNumber | string;
        _to: BigNumber | string;
      },
      {
        _campaign?: BigNumber | string | Array<BigNumber | string>;
        _from?: BigNumber | string | Array<BigNumber | string>;
        _to?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "Joined", eventFilter);
  }
  public EscrowEvent(eventFilter: {
    _campaign?: BigNumber | string | Array<BigNumber | string>;
    _converter?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    {
      _campaign: BigNumber | string;
      _converter: BigNumber | string;
      _tokenID: BigNumber | number;
      _childContractID: BigNumber | string;
      _indexOrAmount: BigNumber | number;
      _type: BigNumber | number;
    },
    {
      _campaign?: BigNumber | string | Array<BigNumber | string>;
      _converter?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        _campaign: BigNumber | string;
        _converter: BigNumber | string;
        _tokenID: BigNumber | number;
        _childContractID: BigNumber | string;
        _indexOrAmount: BigNumber | number;
        _type: BigNumber | number;
      },
      {
        _campaign?: BigNumber | string | Array<BigNumber | string>;
        _converter?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "Escrow", eventFilter);
  }
  public RewardedEvent(eventFilter: {
    _campaign?: BigNumber | string | Array<BigNumber | string>;
    _to?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    {
      _campaign: BigNumber | string;
      _to: BigNumber | string;
      _amount: BigNumber | number;
    },
    {
      _campaign?: BigNumber | string | Array<BigNumber | string>;
      _to?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        _campaign: BigNumber | string;
        _to: BigNumber | string;
        _amount: BigNumber | number;
      },
      {
        _campaign?: BigNumber | string | Array<BigNumber | string>;
        _to?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "Rewarded", eventFilter);
  }
  public FulfilledEvent(eventFilter: {
    _campaign?: BigNumber | string | Array<BigNumber | string>;
    _converter?: BigNumber | string | Array<BigNumber | string>;
    _tokenID?: BigNumber | number | Array<BigNumber | number>;
  }): TC.DeferredEventWrapper<
    {
      _campaign: BigNumber | string;
      _converter: BigNumber | string;
      _tokenID: BigNumber | number;
      _childContractID: BigNumber | string;
      _indexOrAmount: BigNumber | number;
      _type: BigNumber | number;
    },
    {
      _campaign?: BigNumber | string | Array<BigNumber | string>;
      _converter?: BigNumber | string | Array<BigNumber | string>;
      _tokenID?: BigNumber | number | Array<BigNumber | number>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        _campaign: BigNumber | string;
        _converter: BigNumber | string;
        _tokenID: BigNumber | number;
        _childContractID: BigNumber | string;
        _indexOrAmount: BigNumber | number;
        _type: BigNumber | number;
      },
      {
        _campaign?: BigNumber | string | Array<BigNumber | string>;
        _converter?: BigNumber | string | Array<BigNumber | string>;
        _tokenID?: BigNumber | number | Array<BigNumber | number>;
      }
    >(this, "Fulfilled", eventFilter);
  }
  public CancelledEvent(eventFilter: {
    _campaign?: BigNumber | string | Array<BigNumber | string>;
    _converter?: BigNumber | string | Array<BigNumber | string>;
    _tokenID?: BigNumber | number | Array<BigNumber | number>;
  }): TC.DeferredEventWrapper<
    {
      _campaign: BigNumber | string;
      _converter: BigNumber | string;
      _tokenID: BigNumber | number;
      _childContractID: BigNumber | string;
      _indexOrAmount: BigNumber | number;
      _type: BigNumber | number;
    },
    {
      _campaign?: BigNumber | string | Array<BigNumber | string>;
      _converter?: BigNumber | string | Array<BigNumber | string>;
      _tokenID?: BigNumber | number | Array<BigNumber | number>;
    }
  > {
    return new TC.DeferredEventWrapper<
      {
        _campaign: BigNumber | string;
        _converter: BigNumber | string;
        _tokenID: BigNumber | number;
        _childContractID: BigNumber | string;
        _indexOrAmount: BigNumber | number;
        _type: BigNumber | number;
      },
      {
        _campaign?: BigNumber | string | Array<BigNumber | string>;
        _converter?: BigNumber | string | Array<BigNumber | string>;
        _tokenID?: BigNumber | number | Array<BigNumber | number>;
      }
    >(this, "Cancelled", eventFilter);
  }
}
