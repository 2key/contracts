/* GENERATED BY TYPECHAIN VER. 0.2.7 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class TwoKeyCampaignInventory extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [
          { name: "_operator", type: "address" },
          { name: "_role", type: "string" }
        ],
        name: "checkRole",
        outputs: [],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "_operator", type: "address" },
          { name: "_role", type: "string" }
        ],
        name: "hasRole",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "ROLE_CONTROLLER",
        outputs: [{ name: "", type: "string" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "addr", type: "address" },
          { name: "roleName", type: "string" }
        ],
        name: "adminRemoveRole",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "addr", type: "address" },
          { name: "roleName", type: "string" }
        ],
        name: "adminAddRole",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getAdminRole",
        outputs: [{ name: "", type: "string" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "onlyControllerRole",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "ROLE_ADMIN",
        outputs: [{ name: "", type: "string" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getControllerRole",
        outputs: [{ name: "", type: "string" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "_contract", type: "address" }],
        name: "Expired",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "operator", type: "address" },
          { indexed: false, name: "role", type: "string" }
        ],
        name: "RoleAdded",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "operator", type: "address" },
          { indexed: false, name: "role", type: "string" }
        ],
        name: "RoleRemoved",
        type: "event"
      },
      {
        constant: false,
        inputs: [
          { name: "_tokenID", type: "uint256" },
          { name: "_assetContract", type: "address" },
          { name: "_amount", type: "uint256" }
        ],
        name: "addFungibleAsset",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_tokenID", type: "uint256" },
          { name: "_assetContract", type: "address" },
          { name: "_index", type: "uint256" }
        ],
        name: "addNonFungibleAsset",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_to", type: "address" },
          { name: "_tokenID", type: "uint256" },
          { name: "_assetContract", type: "address" },
          { name: "_amount", type: "uint256" }
        ],
        name: "transferFungibleAsset",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_to", type: "address" },
          { name: "_tokenID", type: "uint256" },
          { name: "_assetContract", type: "address" },
          { name: "_assetTokenID", type: "uint256" }
        ],
        name: "transferNonFungibleAsset",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_to", type: "address" },
          { name: "_tokenID", type: "uint256" },
          { name: "_assetContract", type: "address" },
          { name: "_amount", type: "uint256" }
        ],
        name: "expireFungible",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_to", type: "address" },
          { name: "_tokenID", type: "uint256" },
          { name: "_assetContract", type: "address" },
          { name: "_assetTokenID", type: "uint256" }
        ],
        name: "expireNonFungible",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_tokenID", type: "uint256" },
          { name: "_assetContract", type: "address" },
          { name: "_amount", type: "uint256" }
        ],
        name: "removeFungibleAssets",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_tokenID", type: "uint256" },
          { name: "_assetContract", type: "address" },
          { name: "_amount", type: "uint256" }
        ],
        name: "addFungibleAssets",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_tokenID", type: "uint256" },
          { name: "_assetContract", type: "address" }
        ],
        name: "setFungibleAssetsToZero",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_tokenID", type: "uint256" },
          { name: "_assetContract", type: "address" }
        ],
        name: "setFungibleAssetsToOne",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "isOnGoing",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "isClosed",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<TwoKeyCampaignInventory> {
    const contract = new TwoKeyCampaignInventory(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get ROLE_CONTROLLER(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.ROLE_CONTROLLER, []);
  }

  public get getAdminRole(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.getAdminRole, []);
  }

  public get onlyControllerRole(): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.onlyControllerRole, []);
  }

  public get ROLE_ADMIN(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.ROLE_ADMIN, []);
  }

  public get getControllerRole(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.getControllerRole, []);
  }

  public get isOnGoing(): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.isOnGoing, []);
  }

  public get isClosed(): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.isClosed, []);
  }

  public checkRole(
    _operator: BigNumber | string,
    _role: string
  ): Promise<void> {
    return TC.promisify(this.rawWeb3Contract.checkRole, [
      _operator.toString(),
      _role.toString()
    ]);
  }

  public hasRole(
    _operator: BigNumber | string,
    _role: string
  ): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.hasRole, [
      _operator.toString(),
      _role.toString()
    ]);
  }

  public adminRemoveRoleTx(
    addr: BigNumber | string,
    roleName: string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "adminRemoveRole",
      [addr.toString(), roleName.toString()]
    );
  }
  public adminAddRoleTx(
    addr: BigNumber | string,
    roleName: string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "adminAddRole",
      [addr.toString(), roleName.toString()]
    );
  }
  public addFungibleAssetTx(
    _tokenID: BigNumber | number,
    _assetContract: BigNumber | string,
    _amount: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "addFungibleAsset",
      [_tokenID.toString(), _assetContract.toString(), _amount.toString()]
    );
  }
  public addNonFungibleAssetTx(
    _tokenID: BigNumber | number,
    _assetContract: BigNumber | string,
    _index: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "addNonFungibleAsset",
      [_tokenID.toString(), _assetContract.toString(), _index.toString()]
    );
  }
  public transferFungibleAssetTx(
    _to: BigNumber | string,
    _tokenID: BigNumber | number,
    _assetContract: BigNumber | string,
    _amount: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "transferFungibleAsset",
      [
        _to.toString(),
        _tokenID.toString(),
        _assetContract.toString(),
        _amount.toString()
      ]
    );
  }
  public transferNonFungibleAssetTx(
    _to: BigNumber | string,
    _tokenID: BigNumber | number,
    _assetContract: BigNumber | string,
    _assetTokenID: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "transferNonFungibleAsset",
      [
        _to.toString(),
        _tokenID.toString(),
        _assetContract.toString(),
        _assetTokenID.toString()
      ]
    );
  }
  public expireFungibleTx(
    _to: BigNumber | string,
    _tokenID: BigNumber | number,
    _assetContract: BigNumber | string,
    _amount: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "expireFungible",
      [
        _to.toString(),
        _tokenID.toString(),
        _assetContract.toString(),
        _amount.toString()
      ]
    );
  }
  public expireNonFungibleTx(
    _to: BigNumber | string,
    _tokenID: BigNumber | number,
    _assetContract: BigNumber | string,
    _assetTokenID: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "expireNonFungible",
      [
        _to.toString(),
        _tokenID.toString(),
        _assetContract.toString(),
        _assetTokenID.toString()
      ]
    );
  }
  public removeFungibleAssetsTx(
    _tokenID: BigNumber | number,
    _assetContract: BigNumber | string,
    _amount: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "removeFungibleAssets",
      [_tokenID.toString(), _assetContract.toString(), _amount.toString()]
    );
  }
  public addFungibleAssetsTx(
    _tokenID: BigNumber | number,
    _assetContract: BigNumber | string,
    _amount: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "addFungibleAssets",
      [_tokenID.toString(), _assetContract.toString(), _amount.toString()]
    );
  }
  public setFungibleAssetsToZeroTx(
    _tokenID: BigNumber | number,
    _assetContract: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setFungibleAssetsToZero",
      [_tokenID.toString(), _assetContract.toString()]
    );
  }
  public setFungibleAssetsToOneTx(
    _tokenID: BigNumber | number,
    _assetContract: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "setFungibleAssetsToOne",
      [_tokenID.toString(), _assetContract.toString()]
    );
  }

  public ExpiredEvent(eventFilter: {
    _contract?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { _contract: BigNumber | string },
    { _contract?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { _contract: BigNumber | string },
      { _contract?: BigNumber | string | Array<BigNumber | string> }
    >(this, "Expired", eventFilter);
  }
  public RoleAddedEvent(eventFilter: {
    operator?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { operator: BigNumber | string; role: string },
    { operator?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { operator: BigNumber | string; role: string },
      { operator?: BigNumber | string | Array<BigNumber | string> }
    >(this, "RoleAdded", eventFilter);
  }
  public RoleRemovedEvent(eventFilter: {
    operator?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { operator: BigNumber | string; role: string },
    { operator?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { operator: BigNumber | string; role: string },
      { operator?: BigNumber | string | Array<BigNumber | string> }
    >(this, "RoleRemoved", eventFilter);
  }
}
